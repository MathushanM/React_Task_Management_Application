{"ast":null,"code":"// authService.js\n\n// Simulated user data for authentication\nconst users = [{\n  id: 1,\n  username: 'user1',\n  password: 'password1',\n  name: 'User One'\n}, {\n  id: 2,\n  username: 'user2',\n  password: 'password2',\n  name: 'User Two'\n}];\n\n// Function to authenticate user credentials\nexport const authenticateUser = (username, password) => {\n  // Find user with matching credentials\n  const user = users.find(u => u.username === username && u.password === password);\n  return user ? {\n    success: true,\n    user\n  } : {\n    success: false,\n    message: 'Invalid username or password'\n  };\n};\n\n// Function to get user by ID\nexport const getUserById = id => {\n  return users.find(u => u.id === id);\n};\n\n// Function to check if user is authenticated\nexport const isAuthenticated = () => {\n  // Simulate authentication by checking if user is logged in (you can replace this with your own authentication logic)\n  return localStorage.getItem('loggedInUser') !== null;\n};\n\n// Function to log in user\nexport const loginUser = userId => {\n  // Simulate login by storing user ID in localStorage\n  localStorage.setItem('loggedInUser', userId);\n};\n\n// Function to log out user\nexport const logoutUser = () => {\n  // Simulate logout by removing user ID from localStorage\n  localStorage.removeItem('loggedInUser');\n};","map":{"version":3,"names":["users","id","username","password","name","authenticateUser","user","find","u","success","message","getUserById","isAuthenticated","localStorage","getItem","loginUser","userId","setItem","logoutUser","removeItem"],"sources":["C:/Users/hp/Desktop/MFD/frontend/src/services/authService.js"],"sourcesContent":["// authService.js\r\n\r\n// Simulated user data for authentication\r\nconst users = [\r\n    { id: 1, username: 'user1', password: 'password1', name: 'User One' },\r\n    { id: 2, username: 'user2', password: 'password2', name: 'User Two' },\r\n  ];\r\n  \r\n  // Function to authenticate user credentials\r\n  export const authenticateUser = (username, password) => {\r\n    // Find user with matching credentials\r\n    const user = users.find(u => u.username === username && u.password === password);\r\n    return user ? { success: true, user } : { success: false, message: 'Invalid username or password' };\r\n  };\r\n  \r\n  // Function to get user by ID\r\n  export const getUserById = (id) => {\r\n    return users.find(u => u.id === id);\r\n  };\r\n  \r\n  // Function to check if user is authenticated\r\n  export const isAuthenticated = () => {\r\n    // Simulate authentication by checking if user is logged in (you can replace this with your own authentication logic)\r\n    return localStorage.getItem('loggedInUser') !== null;\r\n  };\r\n  \r\n  // Function to log in user\r\n  export const loginUser = (userId) => {\r\n    // Simulate login by storing user ID in localStorage\r\n    localStorage.setItem('loggedInUser', userId);\r\n  };\r\n  \r\n  // Function to log out user\r\n  export const logoutUser = () => {\r\n    // Simulate logout by removing user ID from localStorage\r\n    localStorage.removeItem('loggedInUser');\r\n  };\r\n  "],"mappings":"AAAA;;AAEA;AACA,MAAMA,KAAK,GAAG,CACV;EAAEC,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAW,CAAC,EACrE;EAAEH,EAAE,EAAE,CAAC;EAAEC,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAW,CAAC,CACtE;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACH,QAAQ,EAAEC,QAAQ,KAAK;EACtD;EACA,MAAMG,IAAI,GAAGN,KAAK,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACN,QAAQ,KAAKA,QAAQ,IAAIM,CAAC,CAACL,QAAQ,KAAKA,QAAQ,CAAC;EAChF,OAAOG,IAAI,GAAG;IAAEG,OAAO,EAAE,IAAI;IAAEH;EAAK,CAAC,GAAG;IAAEG,OAAO,EAAE,KAAK;IAAEC,OAAO,EAAE;EAA+B,CAAC;AACrG,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAIV,EAAE,IAAK;EACjC,OAAOD,KAAK,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,KAAKA,EAAE,CAAC;AACrC,CAAC;;AAED;AACA,OAAO,MAAMW,eAAe,GAAGA,CAAA,KAAM;EACnC;EACA,OAAOC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI;AACtD,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAIC,MAAM,IAAK;EACnC;EACAH,YAAY,CAACI,OAAO,CAAC,cAAc,EAAED,MAAM,CAAC;AAC9C,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAGA,CAAA,KAAM;EAC9B;EACAL,YAAY,CAACM,UAAU,CAAC,cAAc,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}